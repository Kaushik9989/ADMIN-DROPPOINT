<% layout("/layouts/boilerplate") %>
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Locker QR Scanner</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
  <script src="https://unpkg.com/html5-qrcode@2.3.8/html5-qrcode.min.js"></script>
  <style>
    #qr-reader {
      width: 100%;
      max-width: 400px;
      margin: auto;
      padding: 20px;
    }
    #qr-result {
      margin-top: 20px;
      font-weight: bold;
      text-align: center;
    }
    .alert-timer {
      position: fixed;
      top: 20px;
      left: 50%;
      transform: translateX(-50%);
      z-index: 1050;
      min-width: 300px;
    }
  </style>
</head>
<body class="bg-light min-vh-100 d-flex flex-column align-items-center justify-content-center">
  <div class="container">
    <h2 class="text-center mb-4">Scan QR to Unlock Locker</h2>
    <div id="qr-reader"></div>
    <div id="qr-result" class="text-center"></div>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
  <script>
    let scannerActive = true;

    function showAlert(message, type, countdownSeconds) {
      const alertDiv = document.createElement('div');
      alertDiv.className = `alert alert-${type} alert-dismissible fade show alert-timer`;
      alertDiv.innerHTML = `
        ${message} <span id="timer-count">(${countdownSeconds} seconds)</span>
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
      `;
      document.body.appendChild(alertDiv);

      let count = countdownSeconds;
      const timerSpan = alertDiv.querySelector('#timer-count');
      const interval = setInterval(() => {
        count--;
        timerSpan.textContent = `(${count} seconds)`;
        if (count <= 0) {
          clearInterval(interval);
          location.reload();
        }
      }, 1000);

      // Auto-dismiss on close
      alertDiv.querySelector('.btn-close').addEventListener('click', () => {
        clearInterval(interval);
        location.reload();
      });
    }

    function onScanSuccess(decodedText) {
      if (!scannerActive) return;
      scannerActive = false;

      // Stop scanner
      html5QrCode.stop().then(() => {
        console.log('Scanner stopped');
      }).catch(err => {
        console.error('Failed to stop scanner:', err);
      });

      // Display decoded text
      document.getElementById('qr-result').textContent = 'Processing QR Code...';

      // Parse QR data
      let data;
      try {
        data = JSON.parse(decodedText);
        if (!data.lockerId || !data.compartmentId || !data.token) {
          throw new Error('Invalid QR data');
        }
      } catch (err) {
        showAlert('❌ Invalid QR Code format', 'danger', 5);
        return;
      }

      const { lockerId, compartmentId, token } = data;

      // Send to backend
      fetch('/unlock-qr', {
        method: 'POST', 
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ lockerId, compartmentId, token })
      })
        .then(res => res.json())
        .then(response => {
          if (response.message.toLowerCase().includes('success')) {
            showAlert('✅ ' + response.message, 'success', 5);
          } else {
            showAlert('❌ ' + response.message, 'danger', 5);
          }
        })
        .catch(err => {
          console.error('Fetch error:', err);
          showAlert('⚠️ Failed to contact server', 'warning', 5);
        });
    }

    const html5QrCode = new Html5Qrcode('qr-reader');
    html5QrCode.start(
      { facingMode: 'environment' },
      { fps: 10, qrbox: { width: 250, height: 250 } },
      onScanSuccess,
      err => console.warn('Scan error:', err)
    ).catch(err => {
      console.error('Unable to start scanner:', err);
      showAlert('⚠️ Failed to start QR scanner. Please check camera permissions.', 'danger', 5);
    });
  </script>
</body>
</html>